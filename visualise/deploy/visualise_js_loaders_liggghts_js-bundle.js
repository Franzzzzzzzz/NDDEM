"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunknddem"] = self["webpackChunknddem"] || []).push([["visualise_js_loaders_liggghts_js"],{

/***/ "./visualise/js/loaders/liggghts.js":
/*!******************************************!*\
  !*** ./visualise/js/loaders/liggghts.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"load_current_orientation\": () => (/* binding */ load_current_orientation),\n/* harmony export */   \"load_current_spheres\": () => (/* binding */ load_current_spheres),\n/* harmony export */   \"load_initial_spheres\": () => (/* binding */ load_initial_spheres),\n/* harmony export */   \"load_world\": () => (/* binding */ load_world)\n/* harmony export */ });\n/* harmony import */ var _node_modules_three_build_three_module_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/three/build/three.module.js */ \"./visualise/node_modules/three/build/three.module.js\");\n\n// import { VTKLoader } from '../../node_modules/three/examples/jsm/loaders/VTKLoader.js'\n\nvar all_locs;\n\nasync function load_world(params, time, world) {\n  if (params.fname.substr(-1) === \"/\") {\n    var fname = params.fname.slice(0, -1);\n  } // remove trailing slash (which we just added) ; //\n  if (params.cache) {\n    var filename = params.data_dir + \"Samples/\" + fname;\n  } else {\n    var filename =\n      params.data_dir + \"Samples/\" + fname + \"?_=\" + new Date().getTime();\n  }\n  let promise = new Promise(function (resolve, reject) {\n    Papa.parse(filename, {\n      download: true,\n      dynamicTyping: true,\n      header: false,\n      preview: 8, // just load eight lines\n      complete: function (results) {\n        params.N = 3; // HACK: ASSUMED!!!\n        params.num_particles = results.data[3][0];\n\n        var x1 = results.data[5][0].split(\" \");\n        var x2 = results.data[6][0].split(\" \");\n        var x3 = results.data[7][0].split(\" \");\n        world.push({});\n        world[0].min = parseFloat(x1[0]);\n        world[0].max = parseFloat(x1[1]);\n        world[0].cur = (world[0].min + world[0].max) / 2;\n        world[0].prev = world[0].cur;\n        world.push({});\n        world[1].min = parseFloat(x2[0]);\n        world[1].max = parseFloat(x2[1]);\n        world[1].cur = (world[1].min + world[1].max) / 2;\n        world[1].prev = world[1].cur;\n        world.push({});\n        world[2].min = parseFloat(x3[0]);\n        world[2].max = parseFloat(x3[1]);\n        world[2].cur = (world[2].min + world[2].max) / 2;\n        world[2].prev = world[2].cur;\n        // console.log(world);\n        // HACK: STILL NOT FINDING TIME STEP OR NUMBER OF TIME STEPS!!!!\n        time.frames_per_second = 1;\n\n        resolve([params, time, world]);\n      },\n    });\n  });\n  var output = await promise.then(function (result) {\n    return result;\n  });\n  return output;\n}\n\nasync function load_initial_spheres(params, time) {\n  let promise = new Promise(function (resolve, reject) {\n    var request = new XMLHttpRequest();\n    if (params.fname.substr(-1) === \"/\") {\n      var fname = params.fname.slice(0, -1);\n    } // remove trailing slash (which we just added) ; //\n    if (params.cache) {\n      var filename = params.data_dir + \"Samples/\" + fname;\n    } else {\n      var filename =\n        params.data_dir + \"Samples/\" + fname + \"?_=\" + new Date().getTime();\n    }\n    request.open(\"GET\", filename, true);\n    request.send(null);\n    request.onreadystatechange = function () {\n      if (\n        request.readyState === 4 &&\n        (request.status === 200 || request.status === 304)\n      ) {\n        // fully loaded and ( fresh or cached )\n        all_locs = [];\n        var lines = request.responseText.split(\"\\n\");\n        for (var i = 0; i < lines.length; i++) {\n          var l = lines[i].split(\" \");\n          if (lines[i] == \"ITEM: TIMESTEP\") {\n            all_locs.push(new Array(params.num_particles));\n            if (all_locs.length == 1) {\n              var m = lines[i + 8].split(\" \");\n              var x1_index = m.indexOf(\"x\") - 2;\n              var x2_index = m.indexOf(\"y\") - 2;\n              var x3_index = m.indexOf(\"z\") - 2;\n              var radius_index = m.indexOf(\"radius\") - 2;\n            }\n            if (all_locs.length == 2) {\n              time.save_rate = lines[i + 1];\n            }\n            i += 8;\n          } else {\n            all_locs[all_locs.length - 1][l[0] - 1] = [\n              parseFloat(l[x1_index]),\n              parseFloat(l[x2_index]),\n              parseFloat(l[x3_index]),\n              parseFloat(l[radius_index]),\n            ];\n          }\n        }\n        time.max = all_locs.length - 1;\n        resolve(all_locs);\n      }\n    };\n  });\n  var output = await promise.then(function (result) {\n    return result[0];\n  });\n  return output;\n}\n\nasync function load_current_spheres(params, time, changed_higher_dim_view) {\n  return all_locs[time.frame];\n}\n\nasync function load_current_orientation(params, time, changed_higher_dim_view) {\n  console.warn(\"Rotations not implemented for LIGGGHTS loader!\");\n}\n\n\n\n\n//# sourceURL=webpack://nddem/./visualise/js/loaders/liggghts.js?");

/***/ })

}]);