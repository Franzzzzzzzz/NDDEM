"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunknddem"] = self["webpackChunknddem"] || []).push([["visualise_js_loaders_binary_js"],{

/***/ "./visualise/js/loaders/binary.js":
/*!****************************************!*\
  !*** ./visualise/js/loaders/binary.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"load_current_orientation\": () => (/* binding */ load_current_orientation),\n/* harmony export */   \"load_current_spheres\": () => (/* binding */ load_current_spheres),\n/* harmony export */   \"load_initial_spheres\": () => (/* binding */ load_initial_spheres),\n/* harmony export */   \"load_world\": () => (/* reexport safe */ _default_js__WEBPACK_IMPORTED_MODULE_0__.load_world)\n/* harmony export */ });\n/* harmony import */ var _default_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./default.js */ \"./visualise/js/loaders/default.js\");\n// import * as THREE from '../../node_modules/three/build/three.module.js';\n\nvar all_locs, all_rots;\n\n\n\nasync function load_initial_spheres(params, time) {\n  var locfilename = params.data_dir + \"Samples/\" + params.fname + \"loc.bin\";\n  let promise = new Promise(function (resolve, reject) {\n    var lReq = new XMLHttpRequest();\n    lReq.open(\"GET\", locfilename, true);\n    lReq.responseType = \"arraybuffer\";\n    lReq.onload = function (oEvent) {\n      if (lReq.status == 404) {\n        const loadingText = document.getElementById(\"loading-text\");\n        loadingText.innerHTML = \"File not found!\";\n      } else {\n        var arrayBuffer = lReq.response;\n        var dataview = new DataView(arrayBuffer);\n        var num_data_pts = arrayBuffer.byteLength / 4;\n        var nt = num_data_pts / params.num_particles / (params.N + 4);\n\n        var a = new Array(nt);\n        for (var i = 0; i < nt; i++) {\n          a[i] = new Array(params.num_particles);\n          for (var j = 0; j < params.num_particles; j++) {\n            a[i][j] = new Array(params.N + 4);\n            for (var k = 0; k < params.N + 4; k++) {\n              a[i][j][k] = dataview.getFloat32(\n                4 * (k + (params.N + 4) * (j + params.num_particles * i)),\n                true\n              );\n            }\n          }\n        }\n        resolve(a);\n        // make_initial_spheres(all_locs[0])\n        // update_spheres(all_locs[0],true);\n        // remove_loading_screen();\n      }\n    };\n    lReq.send(null);\n  });\n\n  if (params.view_mode === \"rotations2\") {\n    var rotfilename = params.data_dir + \"Samples/\" + params.fname + \"rot.bin\";\n    var rReq = new XMLHttpRequest();\n    rReq.open(\"GET\", rotfilename, true);\n    rReq.responseType = \"arraybuffer\";\n    rReq.onload = function (oEvent) {\n      var arrayBuffer = rReq.response;\n      var dataview = new DataView(arrayBuffer);\n      var num_data_pts = arrayBuffer.byteLength / 4;\n      var nt = num_data_pts / params.num_particles / (params.N * params.N);\n\n      all_rots = new Array(nt);\n      for (var i = 0; i < nt; i++) {\n        all_rots[i] = new Array(params.num_particles);\n        for (var j = 0; j < params.num_particles; j++) {\n          all_rots[i][j] = new Array(params.N * params.N);\n          for (var k = 0; k < params.N * params.N; k++) {\n            all_rots[i][j][k] = dataview.getFloat32(\n              4 * (k + params.N * params.N * (j + params.num_particles * i)),\n              true\n            );\n          }\n        }\n      }\n      // console.log(all_locs)\n    };\n    rReq.send(null);\n  }\n  return await promise.then(function (result) {\n    all_locs = result;\n    return result[time.frame];\n  });\n}\n\nasync function load_current_spheres(params, time, changed_higher_dim_view) {\n  // console.log(all_locs[time.frame]);\n  return all_locs[time.frame];\n}\n\nasync function load_current_orientation(params, time, changed_higher_dim_view) {\n  return all_rots[time.frame];\n}\n\n\n\n\n//# sourceURL=webpack://nddem/./visualise/js/loaders/binary.js?");

/***/ }),

/***/ "./visualise/js/loaders/default.js":
/*!*****************************************!*\
  !*** ./visualise/js/loaders/default.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"load_current_orientation\": () => (/* binding */ load_current_orientation),\n/* harmony export */   \"load_current_spheres\": () => (/* binding */ load_current_spheres),\n/* harmony export */   \"load_initial_spheres\": () => (/* binding */ load_initial_spheres),\n/* harmony export */   \"load_world\": () => (/* binding */ load_world)\n/* harmony export */ });\n// import * as THREE from '../../node_modules/three/build/three.module.js';\n\nvar spheres;\nvar orientations;\n\nasync function load_world(params, time, world) {\n  let promise = new Promise(function (resolve, reject) {\n    var request = new XMLHttpRequest();\n    if (params.cache) {\n      request.open(\n        \"GET\",\n        params.data_dir + \"Samples/\" + params.fname + \"in\",\n        true\n      );\n    } else {\n      request.open(\n        \"GET\",\n        params.data_dir +\n          \"Samples/\" +\n          params.fname +\n          \"in?_=\" +\n          new Date().getTime(),\n        true\n      );\n    }\n    request.send(null);\n    request.onreadystatechange = function () {\n      if (\n        request.readyState === 4 &&\n        (request.status === 200 || request.status === 304)\n      ) {\n        // fully loaded and ( fresh or cached )\n        // var type = request.getResponseHeader('Content-Type');\n        // if (type.indexOf(\"text\") !== 1) {\n        var lines = request.responseText.split(\"\\n\");\n        for (var i = 0; i < lines.length; i++) {\n          // console.log(lines[i])\n          var line = lines[i].replace(/ {1,}/g, \" \"); // remove multiple spaces\n          var l = line.split(\" \");\n          if (l[0] == \"dimensions\") {\n            params.N = parseInt(l[1]);\n            params.num_particles = parseInt(l[2]);\n            for (var j = 0; j < params.N; j++) {\n              world.push({});\n              world[j].min = 0;\n              world[j].max = 1;\n              world[j].cur = 0.5;\n              world[j].prev = 0.5;\n              world[j].wall = false;\n            }\n          } else if (l[0] == \"boundary\") {\n            if (l[2] == \"WALL\" || l[2] == \"PBC\") {\n              world[l[1]].min = parseFloat(l[3]);\n              world[l[1]].max = parseFloat(l[4]);\n              world[l[1]].cur = (world[l[1]].min + world[l[1]].max) / 2;\n              world[l[1]].prev = world[l[1]].cur;\n            }\n            if (l[2] == \"WALL\") {\n              world[l[1]].wall = true;\n            }\n          } else if (l[0] == \"set\") {\n            if (l[1] == \"T\") {\n              time.max = parseInt(l[2]) - 1;\n            } else if (l[1] === \"tdump\") {\n              time.save_rate = parseInt(l[2]);\n            } else if (l[1] === \"dt\") {\n              time.dt_dem = parseFloat(l[2]);\n            }\n          } else if (l[0] == \"freeze\") {\n            params.pinky = parseInt(l[1]);\n          }\n        }\n        if (params.N == 1) {\n          // just used for setting up cameras etc\n          world.push({});\n          world[1].min = 0;\n          world[1].max = 0;\n          world[1].cur = 0.5;\n          world[1].prev = 0.5;\n        }\n        if (params.N < 3) {\n          // just used for setting up cameras etc\n          world.push({});\n          world[2].min = 0;\n          world[2].max = 0;\n          world[2].cur = 0.5;\n          world[2].prev = 0.5;\n        }\n        time.frames_per_second = 1 / (time.save_rate * time.dt_dem); // time between DEM frames in seconds\n        time.nt = time.max * time.frames_per_second; // total number of saved frames\n        // build_world();\n        // remove_everything(); // only runs on postMessage receive\n        // animate();\n        resolve([params, time, world]);\n        // }\n      }\n    };\n  });\n  var output = await promise.then(function (result) {\n    return result;\n  });\n  return output;\n}\n\n/**\n * Make the initial particles\n */\nasync function load_initial_spheres(params, time) {\n  if (params.cache) {\n    var filename =\n      params.data_dir +\n      \"Samples/\" +\n      params.fname +\n      \"dump-\" +\n      String(time.cur * time.save_rate).padStart(5, \"0\") +\n      \".csv\";\n  } else {\n    var filename =\n      params.data_dir +\n      \"Samples/\" +\n      params.fname +\n      \"dump-\" +\n      String(time.cur * time.save_rate).padStart(5, \"0\") +\n      \".csv\" +\n      \"?_=\" +\n      new Date().getTime();\n  }\n  console.log(filename);\n  let promise = new Promise(function (resolve, reject) {\n    Papa.parse(filename, {\n      download: true,\n      dynamicTyping: true,\n      header: false,\n      complete: function (results) {\n        spheres = results.data.slice(1); // skip header\n        resolve(spheres);\n      },\n    });\n  });\n  spheres = await promise.then(function (result) {\n    return result;\n  });\n  return spheres;\n}\n\n/**\n * Update sphere locations\n * @param {number} t timestep\n * @param {number} changed_higher_dim_view flag to determine if we have changed which dimensions we are representing --- NOTE: CURRENTLY NOT DOING ANYTHING\n */\nasync function load_current_spheres(params, time, changed_higher_dim_view) {\n  if (params.cache) {\n    var filename =\n      params.data_dir +\n      \"Samples/\" +\n      params.fname +\n      \"dump-\" +\n      String(time.frame * time.save_rate).padStart(5, \"0\") +\n      \".csv\";\n  } else {\n    var filename =\n      params.data_dir +\n      \"Samples/\" +\n      params.fname +\n      \"dump-\" +\n      String(time.frame * time.save_rate).padStart(5, \"0\") +\n      \".csv\" +\n      \"?_=\" +\n      new Date().getTime();\n  }\n  let promise = new Promise(function (resolve, reject) {\n    Papa.parse(filename, {\n      download: true,\n      dynamicTyping: true,\n      header: false,\n      cache: params.cache,\n      complete: function (results) {\n        resolve(results.data.slice(1)); // skip header\n      },\n    });\n  });\n  spheres = await promise.then(function (result) {\n    return result;\n  });\n  return spheres;\n}\n\nasync function load_current_orientation(params, time, changed_higher_dim_view) {\n  if (params.cache) {\n    var filename =\n      params.data_dir +\n      \"Samples/\" +\n      params.fname +\n      \"dumpA-\" +\n      String(time.frame * time.save_rate).padStart(5, \"0\") +\n      \".csv\";\n  } else {\n    var filename =\n      params.data_dir +\n      \"Samples/\" +\n      params.fname +\n      \"dumpA-\" +\n      String(time.frame * time.save_rate).padStart(5, \"0\") +\n      \".csv\" +\n      \"?_=\" +\n      new Date().getTime();\n  }\n  let promise = new Promise(function (resolve, reject) {\n    Papa.parse(filename, {\n      download: true,\n      dynamicTyping: true,\n      header: false,\n      cache: params.cache,\n      complete: function (results) {\n        resolve(results.data.slice(1));\n      },\n    });\n  });\n  orientations = await promise.then(function (result) {\n    return result;\n  });\n  return orientations;\n}\n\n\n\n\n//# sourceURL=webpack://nddem/./visualise/js/loaders/default.js?");

/***/ })

}]);