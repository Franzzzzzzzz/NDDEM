/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./visualise/examples/js/torus_explainer.js":
/*!**************************************************!*\
  !*** ./visualise/examples/js/torus_explainer.js ***!
  \**************************************************/
/***/ (() => {

eval("const urlParams = new URLSearchParams(window.location.search);\nconst recorder = new CCapture({\n    verbose: true,\n    display: true,\n    framerate: 30,\n    quality: 100,\n    format: 'png',\n    timeLimit: 100,\n    frameLimit: 0,\n    autoSaveTime: 0\n});\nif ( urlParams.has('record') ) { addRecordOnKeypress() };\nfunction addRecordOnKeypress() {\n    document.addEventListener(\"keydown\", function(event) {\n        if (event.code == 'KeyR') {\n            if (record) {\n                recorder.stop();\n                recorder.save();\n            }\n            else {\n                recorder.start();\n            }\n            record = !record;\n        }\n    }, false);\n}\nfunction do_preprogrammed_motion() {\n    if (segment == 0) {\n        slice.D4 += 0.05;\n        if (slice.D4 >= 1) { segment += 1; }\n    }\n    else if (segment == 1) {\n        slice.D4 -= 0.05;\n        if (slice.D4 <= -1) { segment += 1; }\n    }\n    else if (segment == 2) {\n        slice.D4 += 0.05;\n        if (slice.D4 >= 0) { segment += 1; }\n    }\n    else if (segment == 3) {\n        slice.D4 = 0;\n        slice.D5 += 0.05;\n        if (slice.D5 >= 1) { segment += 1; }\n    }\n    else if (segment == 4) {\n        slice.D5 -= 0.05;\n        if (slice.D5 <= -1) { segment += 1; }\n    }\n    else if (segment == 5) {\n        parametric += 0.05;\n        spiral -= 0.0025;\n        slice.D4 = spiral*Math.sin(parametric);\n        slice.D5 = -spiral*Math.cos(parametric);\n        if (spiral <= 0) { segment = 0; recorder.stop();\n        recorder.save(); }\n    }\n    update_spheres();\n\n}\nlet container = document.getElementById( 'container' );\nlet N_tag = document.createElement( 'div' );\nN_tag.setAttribute(\"id\", \"N_tag\");\nN_tag.innerHTML = \"5D\";\ncontainer.appendChild(N_tag);\nfunction update_spheres() {\n    var R_draw = Math.sqrt( 1 -\n                            Math.pow( slice.D4, 2) -\n                            Math.pow( slice.D5, 2));\n    if ( R_draw == 0 ) { sphere.visible = false; }\n    else {\n        sphere.visible = true;\n        sphere.scale.set(R_draw,R_draw,R_draw);\n    };\n\n    let phi   = 2.*Math.PI*(slice.D4)/(6) + Math.PI/2.;\n    let theta = 2.*Math.PI*(slice.D5)/(6) ;\n    let x = (R + r*Math.cos(theta))*Math.cos(phi);\n    let y = (R + r*Math.cos(theta))*Math.sin(phi);\n    let z = r*Math.sin(theta);\n    point.position.set(x,y,z);\n    // wall.position.x = x;\n};\nvar record = false; var segment = 0; var parametric = 0; var spiral = 1;\nvar quality = 7;\nvar controls;\nvar slice = {'D4':0, 'D5':0};\nvar scene = new THREE.Scene();\nscene.background = new THREE.Color( 0x111111 );\nvar camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\ncamera.position.z = 4;\ncamera.position.x = 1.5;\n\n\nvar renderer = new THREE.WebGLRenderer();\n// var controls = new THREE.TrackballControls( camera, renderer.domElement );\nrenderer.setPixelRatio( window.devicePixelRatio );\nrenderer.setSize( window.innerWidth, window.innerHeight );\n// document.body.appendChild( renderer.domElement );\ncontainer.appendChild( renderer.domElement );\n\nvar background_light = new THREE.AmbientLight( 0x555555 );\nscene.add( background_light );\nvar light = new THREE.PointLight(0xa0a0a0);\nlight.position.z = 8\nlight.position.x = 5\nscene.add( light );\n\nvar sphere_geometry = new THREE.SphereGeometry( 1, Math.pow(2,quality), Math.pow(2,quality) );\nvar sphere_material = new THREE.MeshPhongMaterial( { color: 0xe72564 } );\nvar sphere  = new THREE.Mesh( sphere_geometry, sphere_material );;\nsphere.position.x = -1;\nscene.add( sphere );\n\n\nlet R = 1;\nlet r = R/2.;\nvar torus_parent = new THREE.Group();\nvar torus_geometry = new THREE.TorusBufferGeometry( R, r, 2*Math.pow(2,quality), Math.pow(2,quality) );\nvar torus_material = new THREE.MeshPhongMaterial( { color: 0xffffff } );\n\nlet torus = new THREE.Mesh( torus_geometry, torus_material );\ntorus.castShadow = true;\ntorus.receiveShadow = true;\n\nvar phi_geometry = new THREE.TorusBufferGeometry( r+R-r/6., r/5., 2*Math.pow(2,quality), Math.pow(2,quality) );\nvar phi_material = new THREE.MeshPhongMaterial( {\n    color: 0x000000,\n    // roughness: 0.7,\n} );\nlet torus_phi = new THREE.Mesh( phi_geometry, phi_material );\n\nvar theta_geometry = new THREE.TorusBufferGeometry( r, r/10., 2*Math.pow(2,quality), Math.pow(2,quality) );\nlet torus_theta = new THREE.Mesh( theta_geometry, phi_material );\ntorus_theta.rotation.y = Math.PI/2;\n\ntorus.position.set(3.,0.,0.);\ntorus_phi.position.set(0.,0.,0.);\ntorus_theta.position.set(0.,R,0.);\nscene.add( torus_parent );\ntorus_parent.add( torus );\ntorus.add( torus_phi );\ntorus.add( torus_theta );\ntorus.rotation.set(Math.PI/2.,Math.PI/4.,0.);\n\nvar pointGeometry = new THREE.SphereGeometry( 1, Math.pow(2,quality), Math.pow(2,quality) );\nvar pointMaterial = new THREE.MeshPhongMaterial( { color: 0xe72564 } );\nvar point = new THREE.Mesh( pointGeometry, pointMaterial );\npoint.scale.set(1./10.,1./10.,1./10.);\ntorus.add( point );\nupdate_spheres();\n\nvar gui = new dat.GUI();\ngui.add( slice, 'D4').min(-3).max(3).step(0.01).listen().name('x<sub>4</sub>').onChange( function( val ) { update_spheres(); }) ;\ngui.add( slice, 'D5').min(-3).max(3).step(0.01).listen().name('x<sub>5</sub>').onChange( function( val ) { update_spheres(); }) ;\ngui.open();\n\nvar animate = function () {\n    if ( controls !== undefined) { controls.update(); }\n    requestAnimationFrame( animate );\n    renderer.render( scene, camera );\n\n    if ( record ) {\n        recorder.capture(renderer.domElement);\n        do_preprogrammed_motion();\n        // torus_parent.rotation.y += 0.01;\n    }\n\n};\nwindow.addEventListener( 'resize', onWindowResize, false );\nanimate();\n\nfunction onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize( window.innerWidth, window.innerHeight );\n    if ( controls !== undefined) { controls.handleResize(); }\n};\n\n\n//# sourceURL=webpack://nddem/./visualise/examples/js/torus_explainer.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./visualise/examples/js/torus_explainer.js"]();
/******/ 	
/******/ })()
;